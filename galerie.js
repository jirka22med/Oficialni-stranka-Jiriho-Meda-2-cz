
let isFullscreenMode = false;

// BEZPEƒåN√Å FUNKCE PRO Z√çSK√ÅN√ç PLATN√âHO INDEXU
function getSafeIndex(index) {
    if (galleryImagesData.length === 0) return -1;
    if (index < 0) return galleryImagesData.length - 1;
    if (index >= galleryImagesData.length) return 0;
    return index;
}

// HLAVN√ç FUNKCE PRO P≈òEP√çN√ÅN√ç CELOOBRAZOVKOV√âHO RE≈ΩIMU PROHL√ç≈ΩEƒåE (F11 EFEKT)
// Tato funkce je nyn√≠ jedin√Ωm vstupn√≠m bodem pro aktivaci/deaktivaci fullscreenu.
function toggleBrowserFullscreen() {
    const modal = document.getElementById('image-modal');
    if (!modal) {
       // console.error('‚ùå Celoobrazovkov√Ω re≈æim prohl√≠≈æeƒçe: Chyb√≠ image-modal!');
        return;
    }

    if (!document.fullscreenElement) {
        // Pokud nejsme ve fullscreenu, p≈ôepneme modal do fullscreenu
        if (modal.requestFullscreen) {
            modal.requestFullscreen().then(() => {
                console.log('üñ•Ô∏è Prohl√≠≈æeƒç: Celoobrazovkov√Ω re≈æim ZAPNUT (p≈ôes API)');
                // Styly a stav isFullscreenMode budou aktualizov√°ny p≈ôes 'fullscreenchange' listener
            }).catch(err => {
               // console.error(`‚ùå Chyba p≈ôi aktivaci prohl√≠≈æeƒçov√©ho fullscreenu: ${err.message}`);
                // V p≈ô√≠padƒõ chyby se ujist√≠me, ≈æe na≈°e intern√≠ promƒõnn√° je spr√°vnƒõ nastavena
                isFullscreenMode = false;
                updateFullscreenButtonIcon();
                updateAllIndicators();
            });
        } else {
            console.warn('‚ö†Ô∏è V√°≈° prohl√≠≈æeƒç nepodporuje Fullscreen API.');
            // Pokud prohl√≠≈æeƒç nepodporuje Fullscreen API, nem≈Ø≈æeme nic dƒõlat
        }
    } else {
        // Pokud jsme ve fullscreenu, ukonƒç√≠me ho
        if (document.exitFullscreen) {
            document.exitFullscreen().then(() => {
                console.log('üñ•Ô∏è Prohl√≠≈æeƒç: Celoobrazovkov√Ω re≈æim VYPNUT (p≈ôes API)');
                // Styly a stav isFullscreenMode budou aktualizov√°ny p≈ôes 'fullscreenchange' listener
            }).catch(err => {
               // console.error(`‚ùå Chyba p≈ôi deaktivaci prohl√≠≈æeƒçov√©ho fullscreenu: ${err.message}`);
                // V p≈ô√≠padƒõ chyby se ujist√≠me, ≈æe na≈°e intern√≠ promƒõnn√° je spr√°vnƒõ nastavena
                isFullscreenMode = true;
                updateFullscreenButtonIcon();
                updateAllIndicators();
            });
        }
    }
}

// Funkce pro aktualizaci ikony tlaƒç√≠tka fullscreen
function updateFullscreenButtonIcon() {
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    if (fullscreenBtn) {
        // Ikona se nyn√≠ ≈ô√≠d√≠ pouze stavem prohl√≠≈æeƒçov√©ho fullscreenu
        if (document.fullscreenElement) {
            fullscreenBtn.innerHTML = 'üóó'; // Ikona pro minimalizaci
            fullscreenBtn.title = 'Ukonƒçit celoobrazovkov√Ω re≈æim';
        } else {
            fullscreenBtn.innerHTML = 'üóñ'; // Ikona pro maximalizaci
            fullscreenBtn.title = 'Celoobrazovkov√Ω re≈æim';
        }
    }
}

// FUNKCE PRO AUTOMATICK√â VYPNUT√ç CELOOBRAZOVKOV√âHO RE≈ΩIMU P≈òI ZAV≈òEN√ç MODALU
function resetFullscreenMode() {
    // Ukonƒç√≠me skuteƒçn√Ω fullscreen prohl√≠≈æeƒçe, pokud je aktivn√≠
    if (document.fullscreenElement && document.exitFullscreen) {
        document.exitFullscreen().then(() => {
            console.log('üñ•Ô∏è Prohl√≠≈æeƒç: Fullscreen ukonƒçen p≈ôi zav≈ôen√≠ modalu');
            // Zbytek resetu (CSS t≈ô√≠dy, isFullscreenMode) probƒõhne po ud√°losti 'fullscreenchange'
        }).catch(err => {
            //console.error(`‚ùå Chyba p≈ôi ukonƒçen√≠ prohl√≠≈æeƒçov√©ho fullscreenu p≈ôi zav≈ôen√≠ modalu: ${err.message}`);
        });
    }
    // Pokud nejsme ve fullscreenu prohl√≠≈æeƒçe, ale na≈°e t≈ô√≠dy jsou z nƒõjak√©ho d≈Øvodu aktivn√≠, resetujeme je
    // (To by se nemƒõlo st√°vat ƒçasto, pokud 'fullscreenchange' funguje spr√°vnƒõ)
    if (!document.fullscreenElement && isFullscreenMode) {
        isFullscreenMode = false;
        const modal = document.getElementById('image-modal');
        const body = document.body;
        if (modal) modal.classList.remove('fullscreen-mode');
        if (body) body.classList.remove('fullscreen-active');
        updateFullscreenButtonIcon();
        console.log('üñ•Ô∏è Celoobrazovkov√Ω re≈æim RESETOV√ÅN (manu√°lnƒõ po zav≈ôen√≠ modalu)');
    }
}

// HLAVN√ç FUNKCE PRO OTEV≈òEN√ç MODALU - ZPƒöT K JEDNODUCHOSTI
function openImageModal(index) {
    console.log(`üöÄ openImageModal vol√°no s indexem: ${index}, celkem obr√°zk≈Ø: ${galleryImagesData.length}`);

    if (galleryImagesData.length === 0) {
        console.warn('‚ö†Ô∏è Galerie je pr√°zdn√°!');
        return;
    }

    // OPRAVA: Bezpeƒçn√° kontrola a korekce indexu
    const safeIndex = getSafeIndex(index);
    if (safeIndex === -1) {
        console.error('‚ùå Nelze zobrazit obr√°zek - pr√°zdn√° galerie');
        return;
    }

    // KL√çƒåOV√Å OPRAVA: V≈ædy nastav index
    currentModalImageIndex = safeIndex;
    console.log(`‚úÖ Nastavuji currentModalImageIndex na: ${currentModalImageIndex}`);

    const modal = document.getElementById('image-modal');
    const modalImg = document.getElementById('modal-img');

    if (!modal || !modalImg) {
        console.error('‚ùå Modal nebo modalImg element nenalezen!');
        return;
    }

    // OVƒö≈òEN√ç: Zkontroluj, ≈æe index je opravdu platn√Ω
    if (currentModalImageIndex < 0 || currentModalImageIndex >= galleryImagesData.length) {
        console.error(`‚ùå KRITICK√Å CHYBA: Index ${currentModalImageIndex} je mimo rozsah 0-${galleryImagesData.length-1}`);
        currentModalImageIndex = 0; // Fallback na prvn√≠ obr√°zek
    }

    const currentImage = galleryImagesData[currentModalImageIndex];
    console.log(`üì∏ Zobrazuji obr√°zek: "${currentImage.name}" na pozici ${currentModalImageIndex + 1}/${galleryImagesData.length}`);

    // JEDNODUCH√â loading
    modalImg.style.transition = 'opacity 0.5s ease-out';
    modalImg.style.opacity = '0.8';

    modalImg.onload = function() {
        console.log(`‚úÖ Obr√°zek naƒçten: ${currentImage.name}`);
        modalImg.style.opacity = '0.8';
    };

    modalImg.onerror = function() {
        console.error(`‚ùå Chyba naƒç√≠t√°n√≠: ${currentImage.name}`);
        modalImg.style.opacity = '0.8';
        modalImg.alt = `‚ùå Chyba naƒç√≠t√°n√≠: ${currentImage.name}`;
    };

    // Nastaven√≠ URL s cache busterem
    const finalUrl = currentImage.url + (currentImage.url.includes('?') ? '&' : '?') + `t=${Date.now()}`;
    modalImg.src = finalUrl;
    modalImg.alt = `${currentImage.name} (${currentModalImageIndex + 1}/${galleryImagesData.length})`;

    // Aktualizace v≈°ech indik√°tor≈Ø
    updateAllIndicators();

    // Otev≈ôi modal pouze pokud nen√≠ u≈æ otev≈ôen√Ω
    if (!modal.classList.contains('show')) {
        showModal(modal);
    }

    // Debug info
    console.log(`üîç Fin√°ln√≠ stav: index=${currentModalImageIndex}, obr√°zek="${currentImage.name}"`);
}

// ZACHOV√ÅNO: Aktualizuje v≈°echny indik√°tory najednou
function updateAllIndicators() {
    updateImageIndicator(currentModalImageIndex, galleryImagesData.length);
    addPositionIndicator(currentModalImageIndex, galleryImagesData.length, galleryImagesData[currentModalImageIndex].name);
    updateNavigationButtons();
    updateFullscreenButtonIcon(); // Aktualizace ikony p≈ôi ka≈æd√© aktualizaci
}

// ZACHOV√ÅNO: Aktualizace ƒç√≠seln√Ωch indik√°tor≈Ø
function updateImageIndicator(currentIndex, totalImages) {
    const currentNumberElement = document.getElementById('current-image-number');
    const totalCountElement = document.getElementById('total-images-count');

    if (currentNumberElement) {
        currentNumberElement.textContent = currentIndex + 1;
        console.log(`üî¢ current-image-number aktualizov√°n na: ${currentIndex + 1}`);
    }

    if (totalCountElement) {
        totalCountElement.textContent = totalImages;
        console.log(`üî¢ total-images-count aktualizov√°n na: ${totalImages}`);
    }
}

// ZACHOV√ÅNO: Aktualizace stavu navigaƒçn√≠ch tlaƒç√≠tek
function updateNavigationButtons() {
    const prevBtn = document.getElementById('prev-image-btn');
    const nextBtn = document.getElementById('next-image-btn');

    if (galleryImagesData.length <= 1) {
        // Pokud je jen jeden nebo ≈æ√°dn√Ω obr√°zek, skryj tlaƒç√≠tka
        if (prevBtn) prevBtn.style.opacity = '0.3';
        if (nextBtn) nextBtn.style.opacity = '0.3';
    } else {
        // Jinak je zobraz norm√°lnƒõ
        if (prevBtn) prevBtn.style.opacity = '1';
        if (nextBtn) nextBtn.style.opacity = '1';
    }
}

// ZACHOV√ÅNO: Vizu√°ln√≠ indik√°tor pozice
function addPositionIndicator(index, total, name) {
    const modal = document.getElementById('image-modal');
    if (!modal) return;

    let indicator = modal.querySelector('.position-indicator');

    if (!indicator) {
        indicator = document.createElement('div');
        indicator.className = 'position-indicator';
        indicator.style.cssText = `
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: bold;
            z-index: 1001;
        `;
        const modalContent = modal.querySelector('.modal-content');
        if (modalContent) {
            modalContent.appendChild(indicator);
        }
    }

    indicator.textContent = `${index + 1}/${total} - ${name}`;
    console.log(`üìç Indik√°tor aktualizov√°n: ${indicator.textContent}`);
}

// JEDNODU≈†E OPTIMALIZOVAN√Å NAVIGACE - bez cache komplikac√≠
let isNavigating = false; // Jen anti-spam ochrana

function navigateImageModal(direction) {
    // Zabr√°nƒõn√≠ spam klik√°n√≠
    if (isNavigating) {
        console.log('‚è≥ Navigace ji≈æ prob√≠h√°...');
        return;
    }

    console.log(`üß≠ NAVIGACE: smƒõr=${direction}, souƒçasn√Ω index=${currentModalImageIndex}`);
    console.log(`üìä Stav galerie: ${galleryImagesData.length} obr√°zk≈Ø`);

    if (galleryImagesData.length === 0) {
        console.warn('‚ö†Ô∏è Nelze navigovat - pr√°zdn√° galerie!');
        return;
    }

    if (galleryImagesData.length === 1) {
        console.log('‚ÑπÔ∏è Pouze jeden obr√°zek - z≈Øst√°v√°me na m√≠stƒõ');
        updateAllIndicators();
        return;
    }

    isNavigating = true;

    // BEZPEƒåN√ù v√Ωpoƒçet nov√©ho indexu - STEP BY STEP DEBUG
    const oldIndex = currentModalImageIndex;
    console.log(`üî¢ P≈òED: currentModalImageIndex = ${oldIndex}`);

    let rawNewIndex = currentModalImageIndex + direction;
    console.log(`üî¢ RAW: ${oldIndex} + ${direction} = ${rawNewIndex}`);

    let safeNewIndex = getSafeIndex(rawNewIndex);
    console.log(`üî¢ SAFE: getSafeIndex(${rawNewIndex}) = ${safeNewIndex}`);

    // KRITICKY D≈ÆLE≈ΩIT√â: Nastav index JEDNOZNAƒåNƒö
    currentModalImageIndex = safeNewIndex;
    console.log(`üî¢ FIN√ÅL: currentModalImageIndex nastaveno na ${currentModalImageIndex}`);

    // OVƒö≈òEN√ç ≈æe se opravdu nastavilo
    if (currentModalImageIndex !== safeNewIndex) {
        console.error(`‚ùå FAT√ÅLN√ç CHYBA: Index se nenastavil spr√°vnƒõ! Oƒçek√°v√°no: ${safeNewIndex}, Skuteƒçnost: ${currentModalImageIndex}`);
        currentModalImageIndex = safeNewIndex; // Force fix
    }

    // OKAM≈ΩIT√Å aktualizace indik√°tor≈Ø
    updateAllIndicators();

    const modalImg = document.getElementById('modal-img');
    if (modalImg) {
        const currentImage = galleryImagesData[currentModalImageIndex];
        console.log(`üñºÔ∏è Zobrazuji: "${currentImage.name}" na indexu ${currentModalImageIndex}`);

        // RYCHL√Å vizu√°ln√≠ odezva
        modalImg.style.transition = 'opacity 0.1s ease-out';
        modalImg.style.opacity = '0.8';

        modalImg.onload = function() {
            console.log(`‚úÖ Navigace dokonƒçena: "${currentImage.name}" na indexu ${currentModalImageIndex}`);
            modalImg.style.opacity = '0.8';
            isNavigating = false; // Uvolni navigaci
        };

        modalImg.onerror = function() {
            console.error(`‚ùå Chyba p≈ôi navigaci: "${currentImage.name}" na indexu ${currentModalImageIndex}`);
            modalImg.style.opacity = '0.8';
            isNavigating = false; // Uvolni navigaci i p≈ôi chybƒõ
        };

        // Nastaven√≠ nov√©ho obr√°zku
        const finalUrl = currentImage.url + (currentImage.url.includes('?') ? '&' : '?') + `t=${Date.now()}`;
        modalImg.src = finalUrl;
        modalImg.alt = `${currentImage.name} (${currentModalImageIndex + 1}/${galleryImagesData.length})`;

        console.log(`üéØ NAVIGACE HOTOV√Å: Zobrazuji obr√°zek "${currentImage.name}" na pozici ${currentModalImageIndex + 1}/${galleryImagesData.length}`);
    } else {
        isNavigating = false; // Uvolni i kdy≈æ nen√≠ modalImg
    }
}

// UPRAVEN√Å FUNKCE PRO ZAV≈òEN√ç MODALU - S RESETEM CELOOBRAZOVKOV√âHO RE≈ΩIMU
function closeImageModal() {
    console.log('üö™ Zav√≠r√°m modal');
    const modal = document.getElementById('image-modal');

    // Reset celoobrazovkov√©ho re≈æimu p≈ôed zav≈ôen√≠m
    resetFullscreenMode();

    hideModal(modal);

    // Reset indexu nen√≠ pot≈ôeba - z≈Øst√°v√° pro p≈ô√≠≈°t√≠ otev≈ôen√≠
    console.log(`üíæ Index z≈Øst√°v√°: ${currentModalImageIndex} pro p≈ô√≠≈°t√≠ otev≈ôen√≠`);
}

// VYLEP≈†EN√â KL√ÅVESOV√â ZKRATKY - Nyn√≠ F11 a tlaƒç√≠tko spou≈°t√≠ skuteƒçn√Ω fullscreen
function setupKeyboardNavigation() {
    document.addEventListener('keydown', function(event) {
        const imageModal = document.getElementById('image-modal');

        // Krok 1: Kontrola, zda je modal viditeln√Ω
        if (!imageModal || imageModal.style.display === 'none') {
            return; // Pokud modal nen√≠ viditeln√Ω, nic nedƒõl√°me
        }

        // Krok 2: Kl√≠ƒçov√© vylep≈°en√≠ - Zkontrolovat, zda je u≈æivatel v editaƒçn√≠m poli
        // activeElement vrac√≠ aktu√°lnƒõ fokusovan√Ω element.
        // tagName vrac√≠ n√°zev tagu ve velk√Ωch p√≠smenech (nap≈ô. 'INPUT', 'TEXTAREA').
        const activeElement = document.activeElement;
        const isEditingText = (
            activeElement.tagName === 'INPUT' ||
            activeElement.tagName === 'TEXTAREA' ||
            activeElement.hasAttribute('contenteditable') // Pro p≈ô√≠pad, ≈æe edituje≈° DIV s contenteditable
        );

        // Pokud u≈æivatel edituje text A stiskl ≈°ipku nebo F11 (nebo Esc),
        // Esc by ale mƒõl fungovat v≈ædy pro zav≈ôen√≠ modalu.
        if (isEditingText && (event.key === 'ArrowLeft' || event.key === 'ArrowRight' || event.key === 'F11')) {
            // Logiku pro p≈ôep√≠n√°n√≠ obr√°zku v modalu ignorujeme, nech√°me ≈°ipku pro textov√© pole
            console.log(`‚å®Ô∏è U≈æivatel edituje text. Kl√°vesa ${event.key} bude ignorov√°na pro modal.`);
            return; // D≈Øle≈æit√©: Ukonƒç√≠me funkci, aby se d√°l nezpracov√°vala pro modal
        }

        // Zabr√°n√≠me defaultn√≠mu chov√°n√≠ ≈°ipek a F11 (pokud nejsme v textov√©m poli)
        if (['ArrowLeft', 'ArrowRight', 'Escape', 'F11'].includes(event.key)) {
            event.preventDefault();
            event.stopPropagation();
        }

        console.log(`‚å®Ô∏è Kl√°vesa stisknuta: ${event.key}`);

        switch(event.key) {
            case 'ArrowLeft':
                console.log('‚¨ÖÔ∏è P≈ôedchoz√≠ obr√°zek (‚Üê)');
                navigateImageModal(-1);
                break;
            case 'ArrowRight':
                console.log('‚û°Ô∏è Dal≈°√≠ obr√°zek (‚Üí)');
                navigateImageModal(1);
                break;
            case 'Escape':
                console.log('üö™ Zav√≠r√°m modal (ESC)');
                closeImageModal();
                break;
            case 'F11':
                console.log('üñ•Ô∏è P≈ôep√≠n√°m PROHL√ç≈ΩEƒåOV√ù celoobrazovkov√Ω re≈æim (F11)');
                toggleBrowserFullscreen(); // Vol√°me skuteƒçn√Ω prohl√≠≈æeƒçov√Ω fullscreen
                break;
        }
    });

    // Listener pro ud√°lost fullscreenchange (kdy≈æ u≈æivatel opust√≠/vstoup√≠ do fullscreenu p≈ôes prohl√≠≈æeƒç, nap≈ô. F11)
    document.addEventListener('fullscreenchange', () => {
        const modal = document.getElementById('image-modal');
        const body = document.body;
        // Aktualizujeme n√°≈° stav isFullscreenMode a t≈ô√≠dy podle skuteƒçn√©ho stavu prohl√≠≈æeƒçe
        if (document.fullscreenElement) {
            console.log('üñ•Ô∏è Fullscreen prohl√≠≈æeƒçe je aktivn√≠.');
            if (modal) modal.classList.add('fullscreen-mode');
            if (body) body.classList.add('fullscreen-active');
            isFullscreenMode = true; // Aktualizujeme intern√≠ promƒõnnou
        } else {
            console.log('üñ•Ô∏è Fullscreen prohl√≠≈æeƒçe byl ukonƒçen.');
            if (modal) modal.classList.remove('fullscreen-mode');
            if (body) body.classList.remove('fullscreen-active');
            isFullscreenMode = false; // Aktualizujeme intern√≠ promƒõnnou
        }
        updateFullscreenButtonIcon(); // Aktualizujeme ikonu tlaƒç√≠tka
        updateAllIndicators(); // Aktualizujeme indik√°tory (nap≈ô. pozici)
    });
}

// Funkce pro dynamick√© vlo≈æen√≠ CSS styl≈Ø
function injectFullscreenStyles() {
    const style = document.createElement('style');
    style.textContent = `
        /* Univerz√°ln√≠ reset pro HTML a BODY, aby se zajistilo pln√© pokryt√≠ viewportu bez okraj≈Ø */
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            text-align: center;
             /*TOTO ZP≈ÆSOBOVALO PROBL√âM, ODSTRANƒöNO */
        }

        /* Skryt√≠ posuvn√≠k≈Ø, pokud by se n√°hodou objevily p≈ôi fullscreenu */
       /* body.fullscreen-active {
            overflow: hidden;
        }*/

        /* --- Styly pro Celoobrazovkov√Ω re≈æim (Fullscreen Mode) --- */
        .modal.fullscreen-mode {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            max-width: 100vw;
            max-height: 100vh;
            background-color: black; /* ƒåistƒõ ƒçern√© pozad√≠ pro fullscreen */
            z-index: 9999; /* Zaji≈°tƒõn√≠, ≈æe bude nad v≈°√≠m ostatn√≠m */
            display: flex; /* Pou≈æit√≠ flexboxu pro centrov√°n√≠ obsahu */
            align-items: center; /* Vertik√°ln√≠ centrov√°n√≠ */
            justify-content: center; /* Horizont√°ln√≠ centrov√°n√≠ */
            padding: 0; /* Bez vnit≈ôn√≠ho odsazen√≠ */
            backdrop-filter: none; /* Vypnut√≠ rozmaz√°n√≠, aby nic neru≈°ilo */
            animation: none; /* Vypnut√≠ animace p≈ôi p≈ôepnut√≠ do fullscreenu */
        }

        .modal.fullscreen-mode .modal-content {
            width: 100%;
            height: 100%;
            max-width: 100%;
            max-height: 100%;
            border-radius: 0;
            background: transparent;
            box-shadow: none;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            animation: none; /* Vypnut√≠ animace p≈ôi p≈ôepnut√≠ do fullscreenu */
        }

        .modal.fullscreen-mode #modal-img {
            /* Ponech√°n√≠ automatick√Ωch rozmƒõr≈Ø */
            width: auto;
            height: auto;
            /* Omezen√≠ na 60% s centrov√°n√≠m */
            max-width: 60%;
            max-height: 60%;
            /* Zaji≈°tƒõn√≠ spr√°vn√©ho pomƒõru stran */
            object-fit: contain;
            /* Perfektn√≠ centrov√°n√≠ pomoc√≠ flexboxu */
            margin: 0; /* Reset v≈°ech margin hodnot */
            /* Cursor pro indikaci mo≈ænosti kliknut√≠ */
            cursor: zoom-out;
            /* Reset ostatn√≠ch styl≈Ø */
            border-radius: 0;
            padding: 0;
            border: none;
            transform: none;
            /* Dodateƒçn√© centrov√°n√≠ pro jistotu */
            position: relative;
            display: block;
        }

        /* Alternativn√≠ zp≈Øsob centrov√°n√≠ pro lep≈°√≠ kompatibilitu */
        .modal.fullscreen-mode .modal-content {
            position: relative;
        }

        .modal.fullscreen-mode #modal-img {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            /* Ponech√°n√≠ p≈Øvodn√≠ch omezen√≠ velikosti */
            max-width: 80%;
            max-height: 80%;
            width: auto;
            height: auto;
            object-fit: contain;
            cursor: zoom-out;
            border-radius: 0;
            padding: 0;
            border: none;
            margin: 0;
        }

        /* zobrazeny ovl√°dac√≠ch prvk≈Ø, kter√© nechceme ve fullscreenu */
        .modal.fullscreen-mode .modal-header,
        .modal.fullscreen-mode .modal-footer,
        /*.modal.fullscreen-mode .position-indicator,*/
        .modal.fullscreen-mode .modal-caption {
            display: none;
             
        }
       
           /* Centrov√°n√≠ indik√°toru pozice v celoobrazovkov√©m re≈æimu */
        .modal.fullscreen-mode .position-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: bold;
            z-index: 1001;
        }

        /* √öpravy pro navigaƒçn√≠ a fullscreen tlaƒç√≠tka ve fullscreenu */
        .modal.fullscreen-mode #prev-image-btn,
        .modal.fullscreen-mode #next-image-btn,
        .modal.fullscreen-mode #fullscreen-btn,
        .modal.fullscreen-mode #close-modal-btn {
            position: absolute; /* Absolutn√≠ pozice */
            z-index: 10000; /* Je≈°tƒõ vy≈°≈°√≠ z-index, aby byly vidƒõt */
            background-color: rgba(50, 50, 50, 0.6); /* Tmav≈°√≠, pr≈Øhledn√© pozad√≠ */
            color: white;
            border-radius: 0%; /* Kulat√© tlaƒç√≠tka */
            padding: 10px;
            font-size: 1.0em;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease, opacity 0.2s ease;
            /* Reset p≈Øvodn√≠ch pozic, pokud byly definov√°ny jinak */
            top: 95%; /* Reset top */
            bottom: auto; /* Reset bottom */
            left: auto; /* Reset left */
            right: auto; /* Reset right */
            transform: none; /* Reset transform */
        }

        .modal.fullscreen-mode #prev-image-btn {
            left: 20px;
             font-size: 0.8em;
            transform: translateY(-50%);
  
        }

        .modal.fullscreen-mode #next-image-btn {
            right: 20px;
             font-size: 0.8em;
                          
            transform: translateY(-50%);
        }

       .modal.fullscreen-mode #fullscreen-btn {
    /* P≈Øvodn√≠ transform: translateY(-50%); z≈Øst√°v√° pro vertik√°ln√≠ centrov√°n√≠ */
    /* N√°sleduj√≠c√≠ ≈ô√°dky p≈ôid√°≈° pro horizont√°ln√≠ centrov√°n√≠ */
font-size: 0.8em;
   
    left: 50%; /* Posune lev√Ω okraj tlaƒç√≠tka na 50% ≈°√≠≈ôky */
    transform: translate(5px, -50%); /* Posune ho o 5px doprava a o polovinu vlastn√≠ v√Ω≈°ky nahoru */
}

.modal.fullscreen-mode #close-modal-btn {
    /* P≈Øvodn√≠ transform: translateY(-50%); z≈Øst√°v√° pro vertik√°ln√≠ centrov√°n√≠ */
    /* N√°sleduj√≠c√≠ ≈ô√°dky p≈ôid√°≈° pro horizont√°ln√≠ centrov√°n√≠ */
font-size: 0.8em;
    
    left: 50%; /* Posune lev√Ω okraj tlaƒç√≠tka na 50% ≈°√≠≈ôky */
    transform: translate(calc(-100% - 55px), -50%); /* Posune ho o vlastn√≠ ≈°√≠≈ôku + 5px doleva a o polovinu vlastn√≠ v√Ω≈°ky nahoru */
}

        /* Hover efekty pro tlaƒç√≠tka ve fullscreenu */
        .modal.fullscreen-mode button:hover {
            background-color: rgba(80, 80, 80, 0.8);
        }

        /* Responzivn√≠ √∫pravy pro fullscreen tlaƒç√≠tka */
        @media (max-width: 480px) {
            .modal.fullscreen-mode #prev-image-btn,
            .modal.fullscreen-mode #next-image-btn {
                width: 20px;
                height: 20px;
                font-size: 0.8em;  
                 
            }
            .modal.fullscreen-mode #close-modal-btn,
            .modal.fullscreen-mode #fullscreen-btn {
                font-size: 0.8em;
                width: 20px;
                height: 20px;
                padding: 5px;
                  
                left: 10px; /* Pro close button */
                right: 10px; /* Pro fullscreen button */
            }
            .modal.fullscreen-mode #fullscreen-btn {
                left: auto; /* Reset pro fullscreen button */
                right: 10px; /* P≈ôesun na pravou stranu */
            }
        }
    `;
    document.head.appendChild(style);
    console.log('‚úÖ Celoobrazovkov√© styly dynamicky vlo≈æeny do <head>.');
}



// OPRAVEN√Å FUNKCE SETUP S LEP≈†√çMI EVENT LISTENERY + CELOOBRAZOVKOV√â TLAƒå√çTKO
function setupGallery() {
    console.log('üöÄ Inicializuji galerii s opraven√Ωm indexov√°n√≠m a celoobrazovkov√Ωm re≈æimem...');

    // Vlo≈æen√≠ CSS styl≈Ø na zaƒç√°tku inicializace
     injectFullscreenStyles();

    const addBtn = document.getElementById('addImageUrlBtn');
    const closeBtn = document.getElementById('close-modal-btn');
    const prevBtn = document.getElementById('prev-image-btn');
    const nextBtn = document.getElementById('next-image-btn');
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    const saveEditImageBtn = document.getElementById('save-edit-image-btn');
    const cancelEditImageBtn = document.getElementById('cancel-edit-image-btn');

    // Event listenery s lep≈°√≠m error handlingem
    if (addBtn) {
        addBtn.addEventListener('click', handleAddImageUrl);
        console.log('‚úÖ Add button listener nastaven');
    }

    if (closeBtn) {
        closeBtn.addEventListener('click', closeImageModal);
        console.log('‚úÖ Close button listener nastaven');
    }

    // OPRAVA: Robustn√≠ navigaƒçn√≠ tlaƒç√≠tka
    if (prevBtn) {
        prevBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('‚¨ÖÔ∏è Klik na p≈ôedchoz√≠ tlaƒç√≠tko');
            navigateImageModal(-1);
        });
        console.log('‚úÖ Previous button listener nastaven');
    }

    if (nextBtn) {
        nextBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('‚û°Ô∏è Klik na dal≈°√≠ tlaƒç√≠tko');
            navigateImageModal(1);
        });
        console.log('‚úÖ Next button listener nastaven');
    }

    // NOV√ù: Celoobrazovkov√© tlaƒç√≠tko nyn√≠ vol√° p≈ô√≠mo prohl√≠≈æeƒçov√Ω fullscreen
    if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üñ•Ô∏è Klik na celoobrazovkov√© tlaƒç√≠tko (spou≈°t√≠ prohl√≠≈æeƒçov√Ω fullscreen)');
            toggleBrowserFullscreen(); // Tlaƒç√≠tko nyn√≠ vol√° p≈ô√≠mo prohl√≠≈æeƒçov√Ω fullscreen
        });
        console.log('‚úÖ Fullscreen button listener nastaven');
    }

    // Ostatn√≠ listenery
    if (saveEditImageBtn) {
        saveEditImageBtn.addEventListener('click', saveEditedImage);
        console.log('‚úÖ Save edit listener nastaven');
    }

    if (cancelEditImageBtn) {
        cancelEditImageBtn.addEventListener('click', () => {
            hideModal(document.getElementById('edit-image-modal'));
        });
        console.log('‚úÖ Cancel edit listener nastaven');
    }

    // Nastaven√≠ kl√°vesov√Ωch zkratek
    setupKeyboardNavigation();
    console.log('‚úÖ Kl√°vesov√© zkratky nastaveny (F11 pro skuteƒçn√Ω celoobrazovkov√Ω re≈æim)');

    console.log('üéâ Galerie s opraven√Ωm indexov√°n√≠m a celoobrazovkov√Ωm re≈æimem je p≈ôipravena!');
}

// OPRAVEN√Å FUNKCE PRO AKTUALIZACI ZOBRAZEN√ç GALERIE
function updateGalleryDisplay() {
    console.log('üîÑ Aktualizuji zobrazen√≠ galerie...');

    const container = document.getElementById('gallery-container');
    if (!container) {
        console.error('‚ùå Gallery container nenalezen!');
        return;
    }

    // Pr√°zdn√° galerie
    if (galleryImagesData.length === 0) {
        container.innerHTML = '<p>Galerie je pr√°zdn√°.</p>';
        console.log('üì≠ Galerie je pr√°zdn√°');
        return;
    }

    container.innerHTML = '';

    galleryImagesData.forEach((imgData, index) => {
        const div = document.createElement('div');
        div.className = 'gallery-image-wrapper';
        const isOwner = currentUserId && imgData.userId === currentUserId;

        div.innerHTML = `
            <img src="${imgData.url}" alt="${imgData.name || 'Obr√°zek z galerie'}"
                 onerror="this.onerror=null;this.src='https://placehold.co/250x200/cccccc/ffffff?text=Obr√°zek+nelze+naƒç√≠st';this.alt='Obr√°zek nelze naƒç√≠st';">
            <button class="delete-img-btn ${isEditMode && isOwner ? '' : 'hidden'}" title="Smazat obr√°zek">&times;</button>
            <i class="fas fa-edit edit-icon ${isEditMode && isOwner ? '' : 'hidden'}" data-image-id="${imgData.id}"></i>
        `;

        // OPRAVA: Spr√°vn√© p≈ôed√°n√≠ indexu p≈ôi kliku na obr√°zek
        const img = div.querySelector('img');
        img.addEventListener('click', () => {
            console.log(`üñ±Ô∏è Klik na obr√°zek s indexem: ${index}`);
            openImageModal(index);
        });

        // Delete button
        const deleteBtn = div.querySelector('.delete-img-btn');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                console.log(`üóëÔ∏è Maz√°n√≠ obr√°zku: ${imgData.name}`);
                deleteGalleryImageFromFirestore(imgData.id);
            });
        }

        // Edit button
        const editIcon = div.querySelector('.edit-icon');
        if (editIcon) {
            editIcon.addEventListener('click', (e) => {
                e.stopPropagation();
                console.log(`‚úèÔ∏è √öprava obr√°zku: ${imgData.name}`);
                editImage(imgData.id);
            });
        }

        container.appendChild(div);
    });

    console.log(`‚úÖ Zobrazen√≠ galerie aktualizov√°no (${galleryImagesData.length} obr√°zk≈Ø)`);

    // OPRAVA: Po zmƒõnƒõ galerie resetujeme index pokud je neplatn√Ω
    if (currentModalImageIndex >= galleryImagesData.length) {
        currentModalImageIndex = Math.max(0, galleryImagesData.length - 1);
        console.log(`üîß Index resetov√°n na: ${currentModalImageIndex}`);
    }
}

// VYLEP≈†EN√Å DEBUG FUNKCE
function debugGallery() {
    console.log('üîç === DEBUG GALERIE ===');
    console.log(`üìä Celkem obr√°zk≈Ø: ${galleryImagesData.length}`);
    console.log(`üìç Aktu√°ln√≠ index: ${currentModalImageIndex}`);
    console.log(`üéØ Aktu√°ln√≠ obr√°zek: ${galleryImagesData[currentModalImageIndex]?.name || '≈Ω√ÅDN√ù/NEPLATN√ù'}`);
    console.log(`‚úÖ Index je platn√Ω: ${currentModalImageIndex >= 0 && currentModalImageIndex < galleryImagesData.length}`);
    console.log(`üñ•Ô∏è Celoobrazovkov√Ω re≈æim: ${document.fullscreenElement ? 'ZAPNUT (prohl√≠≈æeƒçov√Ω)' : 'VYPNUT'}`);

    console.log('üìã Seznam v≈°ech obr√°zk≈Ø:');
    galleryImagesData.forEach((img, index) => {
        const indicator = index === currentModalImageIndex ? 'üëâ AKTU√ÅLN√ç' : '  ';
        console.log(`${indicator} [${index}]: ${img.name} - ${img.url.substring(0, 50)}...`);
    });

    console.log('üß™ Simulace navigace:');
    if (galleryImagesData.length > 0) {
        const prevIndex = getSafeIndex(currentModalImageIndex - 1);
        const nextIndex = getSafeIndex(currentModalImageIndex + 1);
        console.log(`‚¨ÖÔ∏è P≈ôedchoz√≠: index ${prevIndex} (${galleryImagesData[prevIndex]?.name || 'N/A'})`);
        console.log(`‚û°Ô∏è Dal≈°√≠: index ${nextIndex} (${galleryImagesData[nextIndex]?.name || 'N/A'})`);
    }

    console.log('üîß Stav DOM element≈Ø:');
    console.log(`Modal existuje: ${!!document.getElementById('image-modal')}`);
    console.log(`Modal img existuje: ${!!document.getElementById('modal-img')}`);
    console.log(`Prev button existuje: ${!!document.getElementById('prev-image-btn')}`);
    console.log(`Next button existuje: ${!!document.getElementById('next-image-btn')}`);
    console.log(`Fullscreen button existuje: ${!!document.getElementById('fullscreen-btn')}`);

    console.log('======================');
}

// POMOCN√â FUNKCE (z≈Øst√°vaj√≠ stejn√©)
function isValidHttpUrl(string) {
    let url;
    try {
        url = new URL(string);
    }
    catch (_) {
        return false;
    }
    return url.protocol === "http:" || url.protocol === "https:";
}

// Funkce pro p≈ôid√°n√≠ obr√°zku (bez zmƒõn v logice indexov√°n√≠)
async function handleAddImageUrl() {
    if (!currentUserId) {
        showAlertModal("P≈ô√≠stup zam√≠tnut", "Pro p≈ôid√°n√≠ obr√°zku se mus√≠te p≈ôihl√°sit.");
        return;
    }

    const urlInput = document.getElementById('newImageUrl');
    if (!urlInput) {
        console.error("Element #newImageUrl not found for adding gallery image.");
        return;
    }

    const imageUrl = urlInput.value.trim();
    if (imageUrl && isValidHttpUrl(imageUrl)) {
        const imageNamePrompt = prompt(`Zadejte n√°zev pro obr√°zek (URL: ${imageUrl.substring(0,50)}...). Pr√°zdn√© pro v√Ωchoz√≠ n√°zev.`, `Obr√°zek ${galleryImagesData.length + 1}`);
        let imageName = (imageNamePrompt && imageNamePrompt.trim() !== "") ? imageNamePrompt.trim() : `Obr√°zek ${galleryImagesData.length + 1}_${Math.floor(Math.random()*1000)}`;

        showLoading("P≈ôid√°v√°m obr√°zek...");
        const newImage = {
            id: `img-${Date.now()}-${Math.random().toString(36).substr(2,5)}`,
            url: imageUrl,
            name: imageName,
            createdAt: Date.now(),
            userId: currentUserId
        };

        try {
            galleryImagesData.unshift(newImage); // P≈ôid√° na zaƒç√°tek
            await saveDataToFirestore();
            showAlertModal("Obr√°zek p≈ôid√°n", `Obr√°zek "${imageName}" byl ulo≈æen do cloudu.`);
            urlInput.value = '';

            // OPRAVA: Po p≈ôid√°n√≠ nov√©ho obr√°zku aktualizuj zobrazen√≠
            updateGalleryDisplay();

            hideLoading();
            console.log(`‚úÖ P≈ôid√°n nov√Ω obr√°zek: ${imageName}, nov√° velikost galerie: ${galleryImagesData.length}`);
        } catch (error) {
            console.error('Chyba p≈ôi p≈ôid√°v√°n√≠ obr√°zku do Firestore:', error);
            showAlertModal("Chyba p≈ôid√°n√≠", `Nepoda≈ôilo se p≈ôidat obr√°zek: ${error.message}`);
            hideLoading();
        }
    } else {
        showAlertModal("Neplatn√° URL", "Zadejte platnou URL adresu obr√°zku (http:// nebo https://).");
    }
}

// Funkce pro maz√°n√≠ s opravou indexov√°n√≠
async function deleteGalleryImageFromFirestore(idToDelete) {
    if (!currentUserId) {
        showAlertModal("P≈ô√≠stup zam√≠tnut", "Pro smaz√°n√≠ obr√°zku se mus√≠te p≈ôihl√°sit.");
        return;
    }

    const imageToDelete = galleryImagesData.find(img => img.id === idToDelete);
    if (!imageToDelete || imageToDelete.userId !== currentUserId) {
        showAlertModal("P≈ô√≠stup zam√≠tnut", "Nem√°te opr√°vnƒõn√≠ smazat tento obr√°zek. M≈Ø≈æete smazat pouze sv√© vlastn√≠ obr√°zky.");
        return;
    }

    const confirmed = await (window.showConfirmModal ?
        showConfirmModal("Smazat obr√°zek?", `Opravdu smazat "${imageToDelete.name || 'tento obr√°zek'}"? Tato akce je nevratn√°!`) :
        confirm(`Smazat obr√°zek "${imageToDelete.name || 'tento obr√°zek'}"?`)
    );

    if (confirmed) {
        showLoading("Ma≈æu obr√°zek...");
        try {
            const deletedIndex = galleryImagesData.findIndex(img => img.id === idToDelete);
            galleryImagesData = galleryImagesData.filter(img => img.id !== idToDelete);

            // OPRAVA: Korekce indexu po smaz√°n√≠
            if (currentModalImageIndex >= galleryImagesData.length) {
                currentModalImageIndex = Math.max(0, galleryImagesData.length - 1);
                console.log(`üîß Index po smaz√°n√≠ korigov√°n na: ${currentModalImageIndex}`);
            }

            await saveDataToFirestore();
            showAlertModal("Obr√°zek smaz√°n", "Obr√°zek byl √∫spƒõ≈°nƒõ smaz√°n z cloudu.");

            // Aktualizuj zobrazen√≠
            updateGalleryDisplay();

            hideLoading();
            console.log(`‚úÖ Obr√°zek smaz√°n, nov√° velikost galerie: ${galleryImagesData.length}`);
        } catch (error) {
            console.error('Chyba p≈ôi maz√°n√≠ obr√°zku z Firestore:', error);
            showAlertModal("Chyba maz√°n√≠", `Nepoda≈ôilo se smazat obr√°zek: ${error.message}`);
            hideLoading();
        }
    }
}

// Funkce pro √∫pravu obr√°zku (z≈Øst√°v√° stejn√°)
let editingImageId = null;

async function editImage(imageId) {
    if (!currentUserId) {
        showAlertModal("P≈ô√≠stup zam√≠tnut", "Pro √∫pravu obr√°zku se mus√≠te p≈ôihl√°sit.");
        return;
    }

    editingImageId = imageId;
    const image = galleryImagesData.find(img => img.id === imageId);
    if (!image || image.userId !== currentUserId) {
        showAlertModal("P≈ô√≠stup zam√≠tnut", "Nem√°te opr√°vnƒõn√≠ upravit tento obr√°zek. M≈Ø≈æete upravit pouze sv√© vlastn√≠ obr√°zky.");
        return;
    }

    if (image) {
        document.getElementById('edit-image-url').value = image.url;
        document.getElementById('edit-image-name').value = image.name;
        showModal(document.getElementById('edit-image-modal'));
    }
}

async function saveEditedImage() {
    if (!currentUserId) {
        showAlertModal("Ulo≈æen√≠ selhalo", "Pro √∫pravu obr√°zku se mus√≠te p≈ôihl√°sit.");
        return;
    }

    const url = document.getElementById('edit-image-url').value.trim();
    const name = document.getElementById('edit-image-name').value.trim();

    if (!isValidHttpUrl(url)) {
        showAlertModal("Neplatn√° URL", "Zadejte platnou URL adresu obr√°zku (http:// nebo https://).");
        return;
    }

    showLoading("Ukl√°d√°m upraven√Ω obr√°zek...");
    try {
        const index = galleryImagesData.findIndex(img => img.id === editingImageId);
        if (index !== -1 && galleryImagesData[index].userId === currentUserId) {
            galleryImagesData[index].url = url;
            galleryImagesData[index].name = name;
            await saveDataToFirestore();
            showAlertModal("Obr√°zek upraven", `Obr√°zek "${name}" byl √∫spƒõ≈°nƒõ upraven v cloudu.`);

            // OPRAVA: Po √∫pravƒõ aktualizuj zobrazen√≠
            updateGalleryDisplay();
        } else {
            showAlertModal("Chyba", "Obr√°zek k √∫pravƒõ nebyl nalezen nebo nem√°te opr√°vnƒõn√≠.");
        }
        hideModal(document.getElementById('edit-image-modal'));
        hideLoading();
    } catch (error) {
        console.error('Chyba p≈ôi ukl√°d√°n√≠ upraven√©ho obr√°zku do Firestore:', error);
        showAlertModal("Chyba ukl√°d√°n√≠", `Nepoda≈ôilo se ulo≈æit √∫pravy obr√°zku: ${error.message}`);
        hideLoading();
    }
}
//tady konƒç√≠ obr√°zek
