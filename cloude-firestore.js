// --- Funkce pro ukl√°d√°n√≠ ostatn√≠ch dat do Firestore (mimo portfolia) ---
async function saveDataToFirestore() {
    if (!currentUserId) {
        //showAlertModal("Ulo≈æen√≠ selhalo", "Pro ulo≈æen√≠ dat se mus√≠te p≈ôihl√°sit.");
        return false;
    }
    showLoading("Ukl√°d√°m data do cloudu...");

    // Aktualizujeme editableContentData z DOM, ale jen pro obecn√© texty, ne portfolio
    document.querySelectorAll('[data-editable]').forEach(el => {
        const id = el.dataset.editable;
        // Kontrolujeme, zda ID nezaƒç√≠n√° na 'portfolio-item-', abychom se vyhnuli star√© struktu≈ôe
        if (id && !id.startsWith('portfolio-item-')) {
            if (el.tagName === 'A' && el.classList.contains('editable-link')) {
                editableContentData[id] = { url: el.href, text: el.childNodes[0] ? el.childNodes[0].nodeValue.trim() : '' };
            } else {
                editableContentData[id] = el.innerHTML;
            }
        }
    });

// NOV√ù K√ìD: Ukl√°d√°n√≠ URL dat ze st√°vaj√≠c√≠ch portfolio polo≈æek
    document.querySelectorAll('#cloude-projek-test .portfolio-item').forEach(portfolioItem => {
        const itemId = portfolioItem.dataset.itemId;
        if (itemId) {
            // Najdeme odkaz v t√©to portfolio polo≈æce
            const linkElement = portfolioItem.querySelector('a.editable-link');
            if (linkElement) {
                const linkTextSpan = linkElement.querySelector('[data-url-editable-text]');
                const linkText = linkTextSpan ? linkTextSpan.textContent.trim() : '';
                const linkUrl = linkElement.getAttribute('href') || '';
                
                // Ulo≈æ√≠me do editableContentData
                editableContentData[`${itemId}-link-text`] = linkText;
                editableContentData[`${itemId}-link-url`] = linkUrl;
                
                console.log(`üíæ Ukl√°d√°m URL data pro ${itemId}:`, { linkText, linkUrl });
            }
        }
    });

    const dataToSave = {
        galleryImages: galleryImagesData,
        savedCodes: savedCodesData,
        externalLinks: externalLinksData,
        editableContent: editableContentData, // Toto jsou obecn√© texty
        editorUserId: currentUserId,
        lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
         
    };

    try {
        await db.collection('publicContent').doc(DOC_ID).set(dataToSave, { merge: false }); // Pou≈æijeme merge: false pro p≈ôeps√°n√≠
        hideLoading();
        //showAlertModal("Ulo≈æeno do cloudu", "V≈°echna data (mimo portfolia) byla √∫spƒõ≈°nƒõ ulo≈æena do Cloud Firestore.");
        return true;
    } catch (error) {
        console.error('Chyba p≈ôi ukl√°d√°n√≠ ostatn√≠ch dat do Firestore:', error);
        hideLoading();
        showAlertModal("Chyba ukl√°d√°n√≠", `Nepoda≈ôilo se ulo≈æit data do cloudu: ${error.message}`);
        return false;
    }
}

// --- Funkce pro naƒç√≠t√°n√≠ dat z Firestore (v≈°ichni vid√≠) ---
async function loadDataFromFirestore() {
    showLoading("Naƒç√≠t√°m data z cloudu...");
    try {
        const docRef = db.collection('publicContent').doc(DOC_ID);
        const doc = await docRef.get();

        if (doc.exists) {
            const data = doc.data();
            editableContentData = data.editableContent || {};
            galleryImagesData = data.galleryImages || [...initialImageUrls];
            savedCodesData = data.savedCodes || [];
            externalLinksData = data.externalLinks || [...initialExternalLinksData];

            // NOV√â: Naƒç√≠t√°me polo≈æky portfolia z pod-kolekce
            const portfolioCollectionRef = docRef.collection('portfolioItems');
            const portfolioSnapshot = await portfolioCollectionRef.get();
            portfolioItemsData = portfolioSnapshot.docs.map(doc => ({
                id: doc.id, // Ukl√°d√°me si ID dokumentu z Firestore
                ...doc.data()
            }));

            applyEditableContent(); // Aplikuje obecn√© editovateln√© texty
            updateGalleryDisplay();
            renderSavedCodesDisplay();
            renderExternalLinks();
            renderPortfolioItems(); // NOV√â: Zavol√°me funkci pro renderov√°n√≠ portfolia
        } else {
            console.log("Hlavn√≠ dokument v cloudu nenalezen, pou≈æ√≠v√°m v√Ωchoz√≠ data.");
            editableContentData = {};
            portfolioItemsData = [];
            galleryImagesData = [...initialImageUrls];
            savedCodesData = [];
            externalLinksData = [...initialExternalLinksData];
        }
        hideLoading();
    } catch (error) {
        console.error('Chyba p≈ôi naƒç√≠t√°n√≠ dat z Firestore:', error);
        hideLoading();
        showAlertModal("Chyba naƒç√≠t√°n√≠", `Nepoda≈ôilo se naƒç√≠st data z cloudu: ${error.message}`);
    }
}

// --- Listener pro aktualizace v re√°ln√©m ƒçase z Firestore ---
function setupFirestoreRealtimeListener() {
    // Listener pro hlavn√≠ dokument
    db.collection('publicContent').doc(DOC_ID)
        .onSnapshot((doc) => {
            if (doc.exists) {
                const data = doc.data();
                console.log("Realtime aktualizace hlavn√≠ho dokumentu z Firestore:", data);
                galleryImagesData = data.galleryImages || [...initialImageUrls];
                savedCodesData = data.savedCodes || [];
                externalLinksData = data.externalLinks || [...initialExternalLinksData];
                editableContentData = data.editableContent || {}; // Obecn√© texty
                applyEditableContent();
                updateGalleryDisplay();
                renderSavedCodesDisplay();
                renderExternalLinks();
                hideLoading();
                console.log("Firestore Aktualizace: Obsah str√°nky byl automaticky aktualizov√°n z cloudu.");
               console.log('Realtime update - galleryImagesData po aktualizaci:', doc.data().galleryImages);
            } else {
                console.log("Hlavn√≠ dokument v Firestore neexistuje, nebo byl smaz√°n.");
                console.log('Realtime update - galleryImagesData po aktualizaci:', doc.data().galleryImages);  
                galleryImagesData = [...initialImageUrls];
                savedCodesData = [];
                externalLinksData = [...initialExternalLinksData];
                editableContentData = {};
                applyEditableContent();
                updateGalleryDisplay();
                renderSavedCodesDisplay();
                renderExternalLinks();
            }
        }, (error) => {
            console.error("Chyba p≈ôi poslouch√°n√≠ realtime aktualizac√≠ hlavn√≠ho dokumentu:", error);
            showAlertModal("Chyba synchronizace", `Nepoda≈ôilo se synchronizovat data v re√°ln√©m ƒçase: ${error.message}`);
        });

    // NOV√â: Listener pro pod-kolekci portfolioItems
    db.collection('publicContent').doc(DOC_ID).collection('portfolioItems')
        .onSnapshot((snapshot) => {
            console.log("Realtime aktualizace portfolia z Firestore.");
            portfolioItemsData = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            renderPortfolioItems(); // Znovu vykresl√≠ portfolio po zmƒõnƒõ
            hideLoading();
        }, (error) => {
            console.error("Chyba p≈ôi poslouch√°n√≠ realtime aktualizac√≠ portfolia:", error);
            showAlertModal("Chyba synchronizace portfolia", `Nepoda≈ôilo se synchronizovat portfolio v re√°ln√©m ƒçase: ${error.message}`);
        });
}

// --- Funkce pro aplikaci editovateln√©ho obsahu (obecn√© texty) ---
function applyEditableContent() {
    for (const id in editableContentData) {
        const element = document.querySelector(`[data-editable="${id}"]`);
        if (element) {
            // Zaji≈°≈•ujeme, ≈æe neaplikujeme na portfolio polo≈æky, ty se renderuj√≠ zvl√°≈°≈•
            if (!id.startsWith('portfolio-item-')) {
                if (element.tagName === 'A' && element.classList.contains('editable-link')) {
                    element.href = editableContentData[id].url || '#';
                    element.innerHTML = `${editableContentData[id].text || ''}<i class="fas fa-edit edit-icon ${isEditMode ? '' : 'hidden'}"></i>`;
                } else {
                    element.innerHTML = editableContentData[id];
                }
            }
        }
    }

    // Aktualizace editovateln√Ωch element≈Ø podle edit m√≥du
    document.querySelectorAll('[data-editable]').forEach(el => {
        if (isEditMode) {
            el.setAttribute('contenteditable', 'true');
        } else {
            el.removeAttribute('contenteditable');
        }
    });
    document.querySelectorAll('.editable-image-wrapper .edit-icon').forEach(icon => {
        if (isEditMode) icon.classList.remove('hidden'); else icon.classList.add('hidden');
    });
    document.querySelectorAll('.editable-link .edit-icon').forEach(icon => {
        if (isEditMode) icon.classList.remove('hidden'); else icon.classList.add('hidden');
    });
}

 // NOV√ù K√ìD: Aplikace URL dat na st√°vaj√≠c√≠ portfolio polo≈æky
        document.querySelectorAll('#cloude-projek-test .portfolio-item').forEach(portfolioItem => {
            const itemId = portfolioItem.dataset.itemId;
            if (itemId) {
                // Naƒçteme ulo≈æen√° URL data
                const savedLinkText = editableContentData[`${itemId}-link-text`];
                const savedLinkUrl = editableContentData[`${itemId}-link-url`];
                
                // Najdeme odkaz v t√©to portfolio polo≈æce
                const linkElement = portfolioItem.querySelector('a.editable-link');
                if (linkElement && (savedLinkText || savedLinkUrl)) {
                    // Aktualizujeme URL
                    if (savedLinkUrl) {
                        linkElement.setAttribute('href', savedLinkUrl);
                    }
                    
                    // Aktualizujeme text odkazu
                    const linkTextSpan = linkElement.querySelector('[data-url-editable-text]');
                    if (linkTextSpan && savedLinkText) {
                        linkTextSpan.textContent = savedLinkText;
                    }
                    
                    console.log(`üîÑ Aplikuji URL data pro ${itemId}:`, { 
                        text: savedLinkText, 
                        url: savedLinkUrl 
                    });
                }
            }
        });